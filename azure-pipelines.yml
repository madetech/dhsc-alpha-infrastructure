# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Plan
  jobs:
  - job: Plan
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - checkout: self
      displayName: 'Checkout repo'
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'AlphaDevARM'
        backendAzureRmResourceGroupName: 'coreinfra-rg'
        backendAzureRmStorageAccountName: 'dapalphainfradev'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'infrastructure.terraform.tfstate'
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out main.tfout'
        environmentServiceNameAzureRM: 'AlphaDevARM'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'main.tfout'
        artifact: 'TerraformPlans'
        publishLocation: 'pipeline'
- stage: Apply
  jobs:
  - job: Apply
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - checkout: self
      displayName: 'Checkout repo'
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'AlphaDevARM'
        backendAzureRmResourceGroupName: 'coreinfra-rg'
        backendAzureRmStorageAccountName: 'dapalphainfradev'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'infrastructure.terraform.tfstate'
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: TerraformPlans
        targetPath: '$(Pipeline.Workspace)'
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '$(Pipeline.Workspace)/main.tfout'
        environmentServiceNameAzureRM: 'AlphaDevARM'